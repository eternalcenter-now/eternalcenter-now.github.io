<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>System Hardware (系统硬件) &#8211; Eternal Center</title>
	<atom:link href="https://eternalcenter-now.github.io/category/system/system-computer-system-hardware-system-installation-system-upgradation/system-hardware/feed/" rel="self" type="application/rss+xml" />
	<link>https://eternalcenter-now.github.io/</link>
	<description></description>
	<lastBuildDate>Wed, 27 Apr 2022 15:40:35 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>[内容] Linux 网卡的显示</title>
		<link>https://eternalcenter-now.github.io/network-card/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Wed, 27 Apr 2022 15:36:01 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Network (系统网络)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=23346</guid>

					<description><![CDATA[方法一：ip 命令 方法二：ifconfig 命令 方法三：iwconfig 命令]]></description>
										<content:encoded><![CDATA[
<h4>方法一：ip 命令</h4>



<pre class="wp-block-code"><code># ip a s
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:1c:42:c9:3c:81 brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.129/24 brd 10.10.10.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fdb2:2c26:f4e4:0:55da:1265:541f:8007/64 scope global temporary dynamic 
       valid_lft 563315sec preferred_lft 44695sec
    inet6 fdb2:2c26:f4e4:0:21c:42ff:fec9:3c81/64 scope global dynamic mngtmpaddr 
       valid_lft 2591846sec preferred_lft 604646sec
    inet6 fe80::21c:42ff:fec9:3c81/64 scope link 
       valid_lft forever preferred_lft forever</code></pre>



<h4>方法二：ifconfig 命令</h4>



<pre class="wp-block-code"><code># ifconfig
eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 10.10.10.129  netmask 255.255.255.0  broadcast 10.10.10.255
        inet6 fdb2:2c26:f4e4:0:21c:42ff:fec9:3c81  prefixlen 64  scopeid 0x0&lt;global&gt;
        inet6 fe80::21c:42ff:fec9:3c81  prefixlen 64  scopeid 0x20&lt;link&gt;
        inet6 fdb2:2c26:f4e4:0:55da:1265:541f:8007  prefixlen 64  scopeid 0x0&lt;global&gt;
        ether 00:1c:42:c9:3c:81  txqueuelen 1000  (Ethernet)
        RX packets 698666  bytes 485434755 (462.9 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 372557  bytes 699406543 (667.0 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 73792  bytes 394285172 (376.0 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 73792  bytes 394285172 (376.0 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre>



<h4>方法三：<strong>iwconfig</strong> 命令</h4>



<pre class="wp-block-code"><code># iwconfig 
lo        no wireless extensions.

eth0      no wireless extensions.
</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[工具] Shell 显示系统常用信息</title>
		<link>https://eternalcenter-now.github.io/shell-display-system-common-information/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 26 Apr 2022 16:14:48 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Languages (语言)]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Shell Monitor (监控)]]></category>
		<category><![CDATA[Shell Tool (工具)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Directory (系统目录)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Network (系统网络)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Performance (系统性能)]]></category>
		<category><![CDATA[System Port Security (系统端口安全)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<category><![CDATA[System Storage (系统存储)]]></category>
		<category><![CDATA[System Storage & System Directory & System File (系统存储 & 系统目录 & 系统文件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=23311</guid>

					<description><![CDATA[介绍： 作者：朱明宇名称：显示系统常用信息作用：显示系统常用信息 使用方法：1. 在此脚本的分割线内写入相应的内容2. 给此脚本添加执行权限3. 执行此脚本 脚本分割线里的变量：1) times=2 #显示系统常用信息的次数2) sleeptime=0.1 #大部分行与行之间显示的间隔时间 注意：部分功能需要安装了 sysstat 软件或搭建了 KVM 虚拟化平台后执行此脚本的用户能够使用 sudo virsh list 命令后才能实现 脚本：]]></description>
										<content:encoded><![CDATA[
<h2>介绍：</h2>



<p>作者：朱明宇<br>名称：显示系统常用信息<br>作用：显示系统常用信息</p>



<p>使用方法：<br>1. 在此脚本的分割线内写入相应的内容<br>2. 给此脚本添加执行权限<br>3. 执行此脚本</p>



<p>脚本分割线里的变量：<br>1) times=2 #显示系统常用信息的次数<br>2) sleeptime=0.1 #大部分行与行之间显示的间隔时间</p>



<p>注意：部分功能需要安装了 sysstat 软件或搭建了 KVM 虚拟化平台后执行此脚本的用户能够使用 sudo virsh list 命令后才能实现</p>



<h2>脚本：</h2>



<pre class="wp-block-code"><code>#!/bin/bash

####################### Separator ########################
times=2
sleeptime=0.1
####################### Separator ########################

nowtime=1

while (( nowtime &lt;= times))
do
        echo -e "Start Monitoring: \c"
	for i in {1..100}
	do
	        echo -e "#\c"
		sleep 0.01
        done
	echo

	sleep $sleeptime
        host=`hostname`
        echo -e "Name:\t\t\t\t\t\t \033&#91;1m$host\033&#91;0m"

        ip=`ip a s | awk '/&#91;1-2]?&#91;0-9]{0,2}\.&#91;1-2]?&#91;0-9]{0,2}/&amp;&amp;!/127.0.0.1/{print $2}' | awk -F/ '{print $1}'`
        for iip in `echo $ip`
        do
		sleep $sleeptime
                echo -e "IP Address:\t\t\t\t\t \033&#91;1m$iip\033&#91;0m"
        done

        sleep $sleeptime

        cpu=`top -bn 1 | awk -F',' '/^%Cpu/{print $4 }' | awk '{print $1}' | awk '{print 100-$1}'`
        echo -e "CPU Usage (Total):\t\t\t\t \033&#91;1m$cpu%\033&#91;0m"

        sleep $sleeptime

        mem=`free | grep Mem | awk '{print $3/$2 * 100.0}' | egrep -o "&#91;1]?&#91;0-9]{0,2}\.&#91;0-9]"`
        echo -e "Memory Usage (Total):\t\t\t\t \033&#91;1m$mem%\033&#91;0m"

	directory=`df -h | grep -v run | grep -v boot | awk '$1~/\/dev/{print $6}'`
        for idirectory in `echo $directory`
        do
                sleep $sleeptime
                directoryusage=`df -h | grep -v run | grep -v boot | awk '$1~/\/dev/{print}' | grep $idirectory$ | awk '{print $5}'`
		if &#91; $idirectory == / -o $idirectory == /ec  ];then
                        echo -e "Directory Usage ($idirectory):\t\t\t\t \033&#91;1m$directoryusage\033&#91;0m"
	        else
                        echo -e "Directory Usage ($idirectory):\t\t\t \033&#91;1m$directoryusage\033&#91;0m"
		fi
        done

	sudo -l | grep 'virsh list' &amp;&gt; /dev/null
        if &#91; $? -eq 0 ];then
	        sleep $sleeptime
	        virtual=`sudo virsh list | egrep &#91;0-9] | wc -l`
	        echo -e "Number of Virtual Machines (Total):\t\t \033&#91;1m$virtual\033&#91;0m"
        fi

        sleep $sleeptime

        user=`who | wc -l`
        echo -e "Number of User Logins (Total):\t\t\t \033&#91;1m$user\033&#91;0m"

        soft=`rpm -qa | wc -l`
        echo -e "Number of Softwares (Total):\t\t\t \033&#91;1m$soft\033&#91;0m"

        sleep $sleeptime

        port=`ss -ntulap | wc -l`
        echo -e "Number of Open Ports (Total):\t\t\t \033&#91;1m$port\033&#91;0m"

        which sar &amp;&gt; /dev/null
        if &#91; $? -eq 0 ];then
                networkcard=`ifconfig | awk -F: '/flags/&amp;&amp;!/lo/{print $1}'`
                for inetworkcard in `echo $networkcard`
                do
                        networkread="`sar -n DEV 1 1 | grep $inetworkcard | awk '/&#91;0-9]&#91;0-9]:&#91;0-9]&#91;0-9]/{print $3/1000}'` m/s"
                        networkwrite="`sar -n DEV 1 1 | grep $inetworkcard | awk '/&#91;0-9]&#91;0-9]:&#91;0-9]&#91;0-9]/{print $4/1000}'` m/s"
			echo $inetworkcard | grep eth &amp;&gt; /dev/null
			if &#91; $?  -ne 0 ];then
	                echo -e "Network Card IO ($inetworkcard):\t\t\t \033&#91;1m$networkread\033&#91;0m (Read)\t\033&#91;1m$networkwrite\033&#91;0m (Write)"
		        else
	                echo -e "Network Card IO ($inetworkcard):\t\t\t\t \033&#91;1m$networkread\033&#91;0m (Read)\t\033&#91;1m$networkwrite\033&#91;0m (Write)"
			fi
                done
        fi

        which iostat &amp;&gt; /dev/null
        if &#91; $? -eq 0 ];then
	        disk=`iostat -d -k 1 1 | awk '!/^$/&amp;&amp;!/Device/&amp;&amp;!/Linux/{print $1}'`
                for idisk in `echo $disk`
	        do
			sleep $sleeptime
		        diskread="`iostat -d -k 1 1 | grep $idisk |  awk '{print $3/1000}'` m/s"
		        diskwrite="`iostat -d -k 1 1 | grep $idisk |  awk '{print $4/1000}'` m/s"
			echo $idisk | grep 'nvme' &amp;&gt; /dev/null
			if &#91; $? -eq 0 ];then
		                echo -e "Disk IO (/dev/$idisk):\t\t\t\t \033&#91;1m$diskread\033&#91;0m (Read)\t\033&#91;1m$diskwrite\033&#91;0m (Write)"
		        else
		                echo -e "Disk IO (/dev/$idisk):\t\t\t\t \033&#91;1m$diskread\033&#91;0m (Read)\t\033&#91;1m$diskwrite\033&#91;0m (Write)"
			fi
	        done

        fi

        echo -e "Complete Monitoring: \c"
        for i in {1..97}
        do
                echo -e "#\c"
                sleep 0.01
        done
        echo
        sleep $sleeptime

        let nowtime++
done

        echo -e "Terminal Monitoring: \c"
        for i in {1..97}
        do
                echo -e "#\c"
                sleep 0.01
        done

exit</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 命令 lsscsi （查看硬盘类型，例：SSD、HD、SATA、FC &#8230;&#8230;）</title>
		<link>https://eternalcenter-now.github.io/lsscsi/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sun, 17 Apr 2022 07:52:04 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=23173</guid>

					<description><![CDATA[内容一：lsscsi 命令的格式 内容二：lsscsi 命令的选项 1) -c 以硬盘全称的形式显示硬盘默认信息2) -d 显示硬盘主设备号和次设备号3) -g 显示硬盘对应的 sg 设备4) -H 显示硬盘的控制器列表5) -i 显示硬盘的 udev 信息6) -l 显示硬盘状态7) -ll 显示硬盘状态，比 -l 选项能显示更多信息8) -lll 或者 -L 显示硬盘状态，比 -ll 选项能显示更多信息9) -p 显示硬盘的 DIF DIX 保护类型10) -P 显示硬盘有效的保护类型11) -s 显示硬盘容量12) -v 显示硬盘设备所在目录13) -w 显示硬盘的 WWN 信息14) -x 以 16 进制显示硬盘的 lun 号]]></description>
										<content:encoded><![CDATA[
<h4>内容一：lsscsi 命令的格式</h4>



<pre class="wp-block-code"><code># lsscsi &lt;option&gt;</code></pre>



<h4>内容二：lsscsi 命令的选项</h4>



<p>1) -c 以硬盘全称的形式显示硬盘默认信息<br>2) -d 显示硬盘主设备号和次设备号<br>3) -g 显示硬盘对应的 sg 设备<br>4) -H 显示硬盘的控制器列表<br>5) -i 显示硬盘的 udev 信息<br>6) -l 显示硬盘状态<br>7) -ll 显示硬盘状态，比 -l 选项能显示更多信息<br>8) -lll 或者 -L 显示硬盘状态，比 -ll 选项能显示更多信息<br>9) -p 显示硬盘的 DIF DIX 保护类型<br>10) -P 显示硬盘有效的保护类型<br>11) -s 显示硬盘容量<br>12) -v 显示硬盘设备所在目录<br>13) -w 显示硬盘的 WWN 信息<br>14) -x 以 16 进制显示硬盘的 lun 号</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 常用日志 （openSUSE &#038; SUSE 版）</title>
		<link>https://eternalcenter-now.github.io/log-opensusesuse/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 07 Apr 2022 09:24:12 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System General Log (系统普通日志)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Log (系统日志)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Security Log (系统安全日志)]]></category>
		<category><![CDATA[System Statistic Log (系统统计日志)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=22930</guid>

					<description><![CDATA[1) /var/log/boot.msg，包含系统启动时显示在屏幕上的信息（补充：当进入系统时，可以同时按下 “ctrl” 键和 “alt” 键和 “f10” 键切换到显示日志的界面，之后可以再通过 KVM 显示系统启动时显示在屏幕上的信息。）2) /var/log/boot.omsg，包含上一次系统启动时显示在屏幕上的信息3) /var/log/messages，包含几乎所有日志4) /var/log/warn，包含 WARNING 也就是级别 4 以上的所有日志5) /var/log/wtmp，包含和系统登陆和重启的所有日志（补充：可以通过 last 命令读取）6) /var/log/YaST2/y2log，包含 YaST 的所有日志7) /var/log/xinetd.log，包含 xinetd 服务的所有日志8) /var/log/dump/，包含 Kdump 工具在系统宕机时收集的所有故障信息9) /var/log/atop，包含 Atop 工具收集的系统资源 （CPU、内存、系统进程、IO） 的所有使用信息]]></description>
										<content:encoded><![CDATA[
<p>1) /var/log/boot.msg，包含系统启动时显示在屏幕上的信息<br>（补充：当进入系统时，可以同时按下 “ctrl” 键和 “alt” 键和 “f10” 键切换到显示日志的界面，之后可以再通过 KVM 显示系统启动时显示在屏幕上的信息。）<br>2) /var/log/boot.omsg，包含上一次系统启动时显示在屏幕上的信息<br>3) /var/log/messages，包含几乎所有日志<br>4) /var/log/warn，包含 WARNING 也就是级别 4 以上的所有日志<br>5) /var/log/wtmp，包含和系统登陆和重启的所有日志<br>（补充：可以通过 last 命令读取）<br>6) /var/log/YaST2/y2log，包含 YaST 的所有日志<br>7) /var/log/xinetd.log，包含 xinetd 服务的所有日志<br>8) /var/log/dump/，包含 Kdump 工具在系统宕机时收集的所有故障信息<br>9) /var/log/atop，包含 Atop 工具收集的系统资源 （CPU、内存、系统进程、IO） 的所有使用信息</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux CPU 温度的显示 （直接显示）</title>
		<link>https://eternalcenter-now.github.io/cpu-temperature/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 04 Apr 2022 15:53:35 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=22845</guid>

					<description><![CDATA[内容一：显示 CPU 的瞬时温度 （补充：1) 这里以显示第 1 个 CPU 的瞬时温度为例2) 将显示的数值除以 1000 就是以摄氏为单位的温度3) 如果显示第 2 个 CPU 的瞬时温度则将 thermal_zone0 换成 thermal_zone1） 内容二：显示 CPU 的瞬时温度，并对数值进行处理 （补充：1) 这里以显示第 1 个 CPU 的瞬时温度为例2) 如果显示第 2 个 CPU 的瞬时温度则将 thermal_zone0 换成 thermal_zone1）]]></description>
										<content:encoded><![CDATA[
<h4>内容一：显示 CPU 的瞬时温度</h4>



<pre class="wp-block-code"><code># cat /sys/class/thermal/thermal_zone0/temp</code></pre>



<p>（<br>补充：<br>1) 这里以显示第 1 个 CPU 的瞬时温度为例<br>2) 将显示的数值除以 1000 就是以摄氏为单位的温度<br>3) 如果显示第 2 个 CPU 的瞬时温度则将 thermal_zone0 换成 thermal_zone1<br>）</p>



<h4>内容二：显示 CPU 的瞬时温度，并对数值进行处理</h4>



<pre class="wp-block-code"><code># echo "CPU Temperature: $&#91;$(cat /sys/class/thermal/thermal_zone0/temp)/1000]"</code></pre>



<p>（<br>补充：<br>1) 这里以显示第 1 个 CPU 的瞬时温度为例<br>2) 如果显示第 2 个 CPU 的瞬时温度则将 thermal_zone0 换成 thermal_zone1<br>）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux CPU 详细信息的显示</title>
		<link>https://eternalcenter-now.github.io/linux-cpu/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 04 Apr 2022 14:04:20 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=22767</guid>

					<description><![CDATA[内容一：显示 Linux CPU 详细信息1.1 显示 Linux CPU 详细信息 或者： 1.2 /proc/cpuinfo 文件里或者 lscpu 命令里重要参数 1) processor，逻辑核心 ID2) physical id，物理封装 CPU ID 也就是 CPU socket ID3) core ID，物理核心 ID4) cpu cores 物理封装 CPU 也就是 CPU socket 里的物理核心数量5) siblings 物理封装 CPU 也就是 CPU socket 里的逻辑核心数量 内容二：显示 Linux CPU 详细信息的案例2.1 显示 Linux CPU 详细信息 2.2 理解显示的 CPU 详细信息 &#8230; <p class="link-more"><a href="https://eternalcenter-now.github.io/linux-cpu/" class="more-link">Continue reading<span class="screen-reader-text"> "[内容] Linux CPU 详细信息的显示"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h4>内容一：显示 Linux CPU 详细信息<br>1.1 显示 Linux CPU 详细信息</h4>



<pre class="wp-block-code"><code># cat /proc/cpuinfo</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># lscpu</code></pre>



<h4>1.2 /proc/cpuinfo 文件里或者 lscpu 命令里重要参数</h4>



<p>1) processor，逻辑核心 ID<br>2) physical id，物理封装 CPU ID 也就是 CPU socket ID<br>3) core ID，物理核心 ID<br>4) cpu cores 物理封装 CPU 也就是 CPU socket 里的物理核心数量<br>5) siblings 物理封装 CPU 也就是 CPU socket 里的逻辑核心数量</p>



<h4>内容二：显示 Linux CPU 详细信息的案例<br>2.1 显示 Linux CPU 详细信息</h4>



<pre class="wp-block-code"><code># cat /proc/cpuinfo
processor	: 0
vendor_id	: AuthenticAMD
cpu family	: 23
model		: 1
model name	: AMD Ryzen 7 1700 Eight-Core Processor
stepping	: 1
microcode	: 0x8001138
cpu MHz		: 1371.214
cache size	: 512 KB
physical id	: 0
siblings	: 16
core id		: 0
cpu cores	: 8
apicid		: 0
initial apicid	: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf pni pclmulqdq monitor ssse3 fma cx16 sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb hw_pstate sme ssbd sev ibpb vmmcall fsgsbase bmi1 avx2 smep bmi2 rdseed adx smap clflushopt sha_ni xsaveopt xsavec xgetbv1 xsaves clzero irperf xsaveerptr arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold avic v_vmsave_vmload vgif overflow_recov succor smca
bugs		: sysret_ss_attrs null_seg spectre_v1 spectre_v2 spec_store_bypass
bogomips	: 5987.93
TLB size	: 2560 4K pages
clflush size	: 64
cache_alignment	: 64
address sizes	: 43 bits physical, 48 bits virtual
power management: ts ttp tm hwpstate eff_freq_ro &#91;13] &#91;14]

......</code></pre>



<pre class="wp-block-code"><code># cat /proc/cpuinfo | grep processor
processor	: 0
processor	: 1
processor	: 2
processor	: 3
processor	: 4
processor	: 5
processor	: 6
processor	: 7
processor	: 8
processor	: 9
processor	: 10
processor	: 11
processor	: 12
processor	: 13
processor	: 14
processor	: 15</code></pre>



<pre class="wp-block-code"><code># cat /proc/cpuinfo | grep 'physical id'
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0
physical id	: 0</code></pre>



<pre class="wp-block-code"><code># cat /proc/cpuinfo | grep 'core id'
core id		: 0
core id		: 1
core id		: 2
core id		: 3
core id		: 4
core id		: 5
core id		: 6
core id		: 7
core id		: 0
core id		: 1
core id		: 2
core id		: 3
core id		: 4
core id		: 5
core id		: 6
core id		: 7</code></pre>



<pre class="wp-block-code"><code># cat /proc/cpuinfo | grep 'cpu cores'
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8
cpu cores	: 8</code></pre>



<pre class="wp-block-code"><code># cat /proc/cpuinfo | grep 'siblings'
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16
siblings	: 16</code></pre>



<h4>2.2 理解显示的 CPU 详细信息</h4>



<p>1) processor 的数字从 0 到 15，代表有 16 个逻辑核心<br>2) physical id 的数字都是 0，代表只有 1 个物理封装 CPU ID 也就是 CPU socket ID<br>3) core id 的数字从 0 到 7，代表有 8 个物理核心<br>4) cpu cores 的数字都是 8，代表每 1 个物理封装 CPU 也就是 CPU socket 里有 8 个物理核心<br>5) siblings 的数字都是 8，代表每 1 个物理封装 CPU 也就是 CPU socket 里有 16 个逻辑核心<br>6) 简单的理解：1 个 CPU，8 个物理核心，16 个逻辑核心</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[排错] 解决 Linux 运行时报错 “watchdog: Bug: soft lockup &#8211; CPU&#8230;&#8230;” （CPU 软锁）</title>
		<link>https://eternalcenter-now.github.io/debug-watchdog-bug-soft-lockup-cpu/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 15 Feb 2022 07:35:47 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Process (系统进程)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=21928</guid>

					<description><![CDATA[报错代码： 分析： 当 CPU 的负载过高时，一个 CPU 在运行某一个进程时，在内核模式下超过 20 秒没有回应，则看门狗程序会将系统所有 CPU 软锁住，然后会让这些 CPU 显示各自正在运行的进程堆栈跟踪 缓解方法： 延长看门狗等待 CPU 内核模式下的回应时间 方法一：通过 /proc/sys/kernel/watchdog_thresh 文件提高看门狗软所 CPU 的时间 （补充：这里以将看门狗的值提高到为 20 为例，也可以根据自己的需求提高更多，默认值为 10） 方法二：通过新建文件提高看门狗软所 CPU 的时间2.1 通过新建文件提高看门狗软所 CPU 的时间 （补充：这里以将看门狗的值提高到为 20 为例，也可以根据自己的需求提高更多，默认值为 10） 2.2 让新建文件立刻生效 深究方法： 开启 Kdump，等此报错再次发生时分析 Kdump 在内核崩溃时搜集信息 vmcore]]></description>
										<content:encoded><![CDATA[
<h2 id="报错代码">报错代码：</h2>



<pre class="wp-block-code"><code>watchdog: Bug: soft lockup - CPU......</code></pre>



<h2 id="分析">分析：</h2>



<p>当 CPU 的负载过高时，一个 CPU 在运行某一个进程时，在内核模式下超过 20 秒没有回应，则看门狗程序会将系统所有 CPU 软锁住，然后会让这些 CPU 显示各自正在运行的进程堆栈跟踪</p>



<h2 id="缓解方法">缓解方法：</h2>



<p>延长看门狗等待 CPU 内核模式下的回应时间</p>



<h4 id="方法一-通过-proc-sys-kernel-watchdog-thresh-文件提高看门狗软所-cpu-的时间">方法一：通过 /proc/sys/kernel/watchdog_thresh 文件提高看门狗软所 CPU 的时间</h4>



<pre class="wp-block-code"><code># echo 20 &gt; /proc/sys/kernel/watchdog_thresh</code></pre>



<p>（补充：这里以将看门狗的值提高到为 20 为例，也可以根据自己的需求提高更多，默认值为 10）</p>



<h4 id="方法二-通过新建文件提高看门狗软所-cpu-的时间2-1-通过新建文件提高看门狗软所-cpu-的时间">方法二：通过新建文件提高看门狗软所 CPU 的时间<br>2.1 通过新建文件提高看门狗软所 CPU 的时间</h4>



<pre class="wp-block-code"><code># echo "kernel.watchdog_thresh=20" &gt; /etc/sysctl.d/99-watchdog_thresh.conf</code></pre>



<p>（补充：这里以将看门狗的值提高到为 20 为例，也可以根据自己的需求提高更多，默认值为 10）</p>



<h4 id="2-2-让新建文件立刻生效">2.2 让新建文件立刻生效</h4>



<pre class="wp-block-code"><code># sysctl -p  /etc/sysctl.d/99-watchdog_thresh.conf</code></pre>



<h2 id="深究方法">深究方法：</h2>



<p>开启 Kdump，等此报错再次发生时分析 Kdump 在内核崩溃时搜集信息 vmcore</p>



<div class="wp-container-1 wp-block-buttons">
<div class="wp-block-button aligncenter is-style-outline"><a class="wp-block-button__link no-border-radius" href="https://eternalcenter-now.github.io/kdump/">Linux Kdump 的开启 <br>（用于收集内核崩溃时的信息）</a></div>



<div class="wp-block-button is-style-outline"><a class="wp-block-button__link" href="https://eternalcenter-now.github.io/kdump-analysis/" style="border-radius:0px">Linux Kdump 内核奔溃信息的分析</a></div>
</div>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 命令 hdparm （测试硬盘读取速度）</title>
		<link>https://eternalcenter-now.github.io/hdparm/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 07 Feb 2022 11:22:26 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=21888</guid>

					<description><![CDATA[（补充：这里以测试 /dev/sda 硬盘的读取速度为例）]]></description>
										<content:encoded><![CDATA[
<pre class="wp-block-code"><code> # hdparm -Ttv /dev/sda

/dev/sda:
 multcount     = 128 (on)
 IO_support    =  1 (32-bit)
 readonly      =  0 (off)
 readahead     = 1024 (on)
 geometry      = 8354/255/63, sectors = 134217728, start = 0
 Timing cached reads:   7304 MB in  2.00 seconds = 3658.90 MB/sec
 Timing buffered disk reads: 612 MB in  3.01 seconds = 203.07 MB/sec</code></pre>



<p>（补充：这里以测试 /dev/sda 硬盘的读取速度为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 命令 sensors 的使用 （显示系统硬件温度）</title>
		<link>https://eternalcenter-now.github.io/sensors/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sun, 06 Feb 2022 10:09:17 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=21881</guid>

					<description><![CDATA[步骤一：安装 sensors 命令 如果是 RHEL &#38; Rocky Linux： 如果是 openSUSE &#38; SLE： 步骤二：显示温度传感器 步骤三：显示系统硬件温度]]></description>
										<content:encoded><![CDATA[
<h4 id="步骤一-安装-sensors-命令">步骤一：安装 sensors 命令</h4>



<p>如果是 RHEL &amp; Rocky Linux：</p>



<pre class="wp-block-code"><code># yum install sensors</code></pre>



<p>如果是 openSUSE &amp; SLE：</p>



<pre class="wp-block-code"><code># zypper install sensors</code></pre>



<h4 id="步骤二-检查温度传感器">步骤二：显示温度传感器</h4>



<pre class="wp-block-code"><code># sensors-detect</code></pre>



<h4 id="步骤三-查看系统硬件温度">步骤三：显示系统硬件温度</h4>



<pre class="wp-block-code"><code># sensors</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 常见存储和存储类型介绍</title>
		<link>https://eternalcenter-now.github.io/introduction-to-linux-common-storage-and-storage-types/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 19 Aug 2021 12:31:20 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[FTP]]></category>
		<category><![CDATA[HTTP]]></category>
		<category><![CDATA[Iscsi]]></category>
		<category><![CDATA[NFS]]></category>
		<category><![CDATA[Samba]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[Storage Services (存储服务)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Storage (系统存储)]]></category>
		<category><![CDATA[System Storage & System Directory & System File (系统存储 & 系统目录 & 系统文件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=17522</guid>

					<description><![CDATA[内容一：常见的存储 1. DAS（直连存储），就是接在主板上的硬盘2. NAS（网络附加存储），例如：NFS、Samba、FTP、HTTP，优点是管理简单，缺点是单点故障3. SAN（网络块存储），例如：Iscsi4. 分布时云存储，例如：Ceph、Swift 内容二：常见的存储类型 1. Block-based access（基于块存储的访问），对应的是块存储（block），例如：直接接在主板上的硬盘、Iscsi、Ceph2. File-based access（基于文件系统的访问），对应的是文件系统存储（filesystem），例如：NFS、Samba、FTP、HTTP、Ceph3. Object-based access（基于对象的访问），对应的是对象存储（object），例如：Ceph]]></description>
										<content:encoded><![CDATA[
<h4>内容一：常见的存储</h4>



<p>1. DAS（直连存储），就是接在主板上的硬盘<br>2. NAS（网络附加存储），例如：NFS、Samba、FTP、HTTP，优点是管理简单，缺点是单点故障<br>3. SAN（网络块存储），例如：Iscsi<br>4. 分布时云存储，例如：Ceph、Swift</p>



<h4>内容二：常见的存储类型</h4>



<p>1. Block-based access（基于块存储的访问），对应的是块存储（block），例如：直接接在主板上的硬盘、Iscsi、Ceph<br>2. File-based access（基于文件系统的访问），对应的是文件系统存储（filesystem），例如：NFS、Samba、FTP、HTTP、Ceph<br>3. Object-based access（基于对象的访问），对应的是对象存储（object），例如：Ceph</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 格式化特点</title>
		<link>https://eternalcenter-now.github.io/linux-formatting-features/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 19 Aug 2021 12:02:18 +0000</pubDate>
				<category><![CDATA[Ceph]]></category>
		<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Clusters (集群)]]></category>
		<category><![CDATA[Distributed Cloud Storage Clusters (分布式云存储集群)]]></category>
		<category><![CDATA[Load Balancing and High Availability Clusters (负载均衡加高可用集群)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Storage (系统存储)]]></category>
		<category><![CDATA[System Storage & System Directory & System File (系统存储 & 系统目录 & 系统文件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=17520</guid>

					<description><![CDATA[内容一：格式化后会产生的分区 格式化会格式出 inode 区和 block 区 内容二：inode 区和 block 区的作用 inode 区默认一格大小是 512 个字节，存储哪一份数据存在了哪些 block 里以及数据的所属者、权限创建时间等 metadata 元数据block 区默认一格大小是 4k，只存储数据本身 内容三：Linux 文件格式的特点 ext3 和 ext4 的 inode 区每一格较小，而 xfs 的 inode 区每一格更大，可以存储更多种类，例如快照等 metadata 元数据]]></description>
										<content:encoded><![CDATA[
<h4>内容一：格式化后会产生的分区</h4>



<p>格式化会格式出 inode 区和 block 区</p>



<h4>内容二：inode 区和 block 区的作用</h4>



<p>inode 区默认一格大小是 512 个字节，存储哪一份数据存在了哪些 block 里以及数据的所属者、权限创建时间等 metadata 元数据<br>block 区默认一格大小是 4k，只存储数据本身</p>



<h4>内容三：Linux 文件格式的特点</h4>



<p>ext3 和 ext4 的 inode 区每一格较小，而 xfs 的 inode 区每一格更大，可以存储更多种类，例如快照等 metadata 元数据</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 内存机制</title>
		<link>https://eternalcenter-now.github.io/memory-mechanism/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 20 Apr 2021 07:37:39 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Performance (系统性能)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=14027</guid>

					<description><![CDATA[内容一：Linux 显示内存的命令 内容二：Linux 内存机制 1) total 内存的总大小2) used 正在被使用的内存大小3) free 没有被使用的内存大小4) shared 正在被用于共享的内存大小5) buffers/cached 正处于缓存状态的内存大小（当 free 状态的内存不够时，它会自动释放出来）6) available 还可以被应用程序使用的内存大小 （补充：释放处于 shared 状态内存的方法1) # echo 1 &#62; /proc/sys/vm/drop_caches #清除 pagecache2) # echo 2 &#62; /proc/sys/vm/drop_caches #清除 slab3) # echo 3 &#62; /proc/sys/vm/drop_caches #同时清除 pagecache 和 slab）]]></description>
										<content:encoded><![CDATA[
<h4 id="内容一-linux-显示内存的命令">内容一：Linux 显示内存的命令</h4>



<pre class="wp-block-code"><code># free -m</code></pre>



<h4 id="内容二-linux-内存机制">内容二：Linux 内存机制</h4>



<p>1) total 内存的总大小<br>2) used 正在被使用的内存大小<br>3) free 没有被使用的内存大小<br>4) shared 正在被用于共享的内存大小<br>5) buffers/cached 正处于缓存状态的内存大小（当 free 状态的内存不够时，它会自动释放出来）<br>6) available 还可以被应用程序使用的内存大小</p>



<p>（<br>补充：释放处于 shared 状态内存的方法<br>1) # echo 1 &gt; /proc/sys/vm/drop_caches #清除 pagecache<br>2) # echo 2 &gt; /proc/sys/vm/drop_caches #清除 slab<br>3) # echo 3 &gt; /proc/sys/vm/drop_caches #同时清除 pagecache 和 slab<br>）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux BIOS 和 EFI 的区分 （系统安装时启动分区种类的显示）</title>
		<link>https://eternalcenter-now.github.io/bios-efi/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 04 Mar 2021 08:46:20 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Installation (系统安装)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Storage (系统存储)]]></category>
		<category><![CDATA[System Storage & System Directory & System File (系统存储 & 系统目录 & 系统文件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=13591</guid>

					<description><![CDATA[内容一：判断 Linux 是 BIOS 还是 EFI 的方法 （补充：如果 /sys/firmware/efi 目录存在，则代表系统是 EFI，否则系统是 BIOS） 内容二：判断 Linux 是 BIOS 还是 EFI 的脚本]]></description>
										<content:encoded><![CDATA[
<h4 id="内容一-判断-linux-是-bios-还是-efi-的方法">内容一：判断 Linux 是 BIOS 还是 EFI 的方法</h4>



<pre class="wp-block-code"><code># ls -ld /sys/firmware/efi</code></pre>



<p>（补充：如果 /sys/firmware/efi 目录存在，则代表系统是 EFI，否则系统是 BIOS）</p>



<h4 id="内容二-判断-linux-是-bios-还是-efi-的脚本">内容二：判断 Linux 是 BIOS 还是 EFI 的脚本</h4>



<pre class="wp-block-code"><code># &#91; -d /sys/firmware/efi ] &amp;&amp; echo UEFI || echo BIOS</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 命令 ipmitool （管理服务器硬件）（转载）</title>
		<link>https://eternalcenter-now.github.io/ipmitool/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Fri, 23 Oct 2020 14:12:26 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=11597</guid>

					<description><![CDATA[注明：所有转载内容皆直接从被转载文章网页的标题和内容的文本中复制而来]]></description>
										<content:encoded><![CDATA[
<pre class="wp-block-code"><code>ipmitool安装，常用指令

IPMI: Intelligent Platform Management Interface
1.下载地址：

https:&#47;&#47;sourceforge.net/projects/ipmitool/
2.安装步骤

a. tar -xvf ipmitool-1.8.18.tar.bz2
b. cd ipmitool-1.8.18
c. ./configure
d. make
e.make install
f.
modprobe ipmi_si
modprobe ipmi_devintf
modprobe ipmi_msghandler
安装成功（实测Centos7.4）
3.常用指令

    远程电源控制类 远程电源控制类
    Ipmitool -I lanplus –H 10.32.228.111 –U username –P Passwordchassis power off
    Ipmitool -I lanplus –H 10.32.228.111 –U username –P Passwordchassis power on
    Ipmitool -I lanplus –H 10.32.228.111 –U username –P Passwordchassis power reset
    Ipmitool -I lanplus –H 10.32.228.111 –U username –P Passwordchassis power cycle
    (注意power cycle 和power reset的区别在于前者从掉电到上电有１秒钟的间隔，而后者是很快上电)
    读取系统状态类
    Ipmitool sensor list 　显示系统所有传感器列表
    Ipmitool fru list　　　显示系统所有现场可替代器件的列表
    Ipmitool sdr list　　　显示系统所有SDRRepository设备列表　
    Ipmitool pef list 　　显示系统平台时间过滤的列表
    3 系统日志类
    Ipmitool sel elist　　　显示所有系统事件日志
    Ipmitool sel clear　　　删除所有系统时间日志
    Ipmitool sel delete ID 删除第ID条SEL
    Ipmitool sel time get 　显示当前BMC的时间
    Ipmitool sel time set XXX 设置当前BMC的时间
    启动设置类
    Ipmitool chassis bootdev bios 重启后停在BIOS 菜单
    Ipmitool chassis bootdev pxe　重启后从PXE启动
    系统相关的命令
    Ipmitool mc info 显示BMC版本信息
    Ipmitool bmc reset cold BMC 热启动
    Ipmitool bmc reset warmBMC冷启动
    网络接口相关命令
    Ipmitool lan print 1 显示channel1的网络配置信息
    Ipmitool lan set 1ipaddr 10.32.2.2 设置channel1的IP地址
    Ipmitool lan set 1 netmask 255.255.0.0 设置channel1的netmask
    Ipmitool lan set 4 defgw ipaddr255.255.0.254 设置channel4的网关
    Ipmitool lan set 2 defgw macaddr 　设置channel2的网关mac address
    Ipmitool lan set 2 ipsrc dhcp 设置channel2的ip 源在DHCP
    Ipmitool lan set 3 ipsrc static 设置channel2的ip是静态获得的
    通道相关命令
    Ipmitool channel info　显示系统默认channel
    Ipmitool channel authcap channel-number privilege 　修改通道的优先级别
    Ipmitool channel getaccess channel-number user-id　读取用户在通道上的权限
    Ipmitool channel setacccess channel-number user-id callin=on ipmi=on link=onprivilege=5 // 设置用户在通道上的权限
    看门狗相关命令
    Ipmitool mc watchdog get　读取当前看门狗的设置
    Ipmitool watchdog off 　　关掉看门狗
    Ipmitool watchdog reset 　　在最近设置的计数器的基础上重启看门狗
    用户管理相关命令
    Ipmitool user list chan-id 显示某通道上的所有用户
    Ipmitool set password &#91;] 修改某用户的密码
    Ipmitool disable 　　禁止掉某用户
    ipmitool enable 　　使能某用户
    ipmitool priv &#91;]　修改某用户在某通道上的权限
    ipmitool test &lt;16|20>&#91;&lt;password]>　测试用户
————————————————
版权声明：本文为CSDN博主「Rudy,Zhao」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_40343504/article/details/82664389</code></pre>



<p>注明：所有转载内容皆直接从被转载文章网页的标题和内容的文本中复制而来</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1013" height="191" src="https://eternalcenter-now.github.io/wp-content/uploads/2020/10/版权申明证明-ipmitool-.png" alt="" class="wp-image-11600" srcset="https://eternalcenter-now.github.io/wp-content/uploads/2020/10/版权申明证明-ipmitool-.png 1013w, https://eternalcenter-now.github.io/wp-content/uploads/2020/10/版权申明证明-ipmitool--300x57.png 300w, https://eternalcenter-now.github.io/wp-content/uploads/2020/10/版权申明证明-ipmitool--768x145.png 768w" sizes="(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px" /><figcaption>CC 4.0 BY-SA 版权协议网址：https://creativecommons.org/licenses/by-sa/4.0/deed.z</figcaption></figure></div>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux 光纤号的显示</title>
		<link>https://eternalcenter-now.github.io/optical-fiber/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Wed, 15 Jul 2020 05:33:29 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=10001</guid>

					<description><![CDATA[步骤目录： 步骤一：显示有哪些光纤号 步骤二：显示光纤号有哪些配置文件 步骤三：显示光纤号配置文件里对应 FC HBA 卡的 WWN 信息 步骤四：显示光纤的状态4.1 光纤正常在线的情况4.2 光纤不正常或者不在线的情况 具体的操作步骤： 步骤一：显示有哪些光纤号 步骤二：显示光纤号有哪些配置文件 步骤三：显示光纤号配置文件里对应 FC HBA 卡的 WWN 信息 步骤四：显示光纤的状态4.1 光纤正常在线的情况 4.2 光纤不正常或者不在线的情况]]></description>
										<content:encoded><![CDATA[
<h2 id="步骤目录">步骤目录：</h2>



<h4 id="步骤一-查看有哪些光纤号">步骤一：显示有哪些光纤号</h4>



<h4 id="步骤二-查看光纤号有哪些配置文件">步骤二：显示光纤号有哪些配置文件</h4>



<h4 id="步骤三-查看光纤号配置文件里对应-fc-hba-卡的-wwn-信息">步骤三：显示光纤号配置文件里对应 FC HBA 卡的 WWN 信息</h4>



<h4 id="步骤四-显示光纤的状态-4-1-光纤正常在线的情况-4-2-光纤不正常或者不在线的情况">步骤四：显示光纤的状态<br>4.1 光纤正常在线的情况<br>4.2 光纤不正常或者不在线的情况</h4>



<h2 id="具体的操作步骤">具体的操作步骤：</h2>



<h4 id="步骤一-查看有哪些光纤号">步骤一：显示有哪些光纤号</h4>



<pre class="wp-block-code"><code># lspci | grep -i fibre</code></pre>



<h4 id="步骤二-查看光纤号有哪些配置文件">步骤二：显示光纤号有哪些配置文件</h4>



<pre class="wp-block-code"><code># ls /sys/class/fc_host/
host1  host2  host3  host4</code></pre>



<h4 id="步骤三-查看光纤号配置文件里对应-fc-hba-卡的-wwn-信息">步骤三：显示光纤号配置文件里对应 FC HBA 卡的 WWN 信息</h4>



<pre class="wp-block-code"><code># cat /sys/class/fc_host/host&#91;1-4]/port_name</code></pre>



<h4 id="步骤四-显示光纤的状态-4-1-光纤正常在线的情况">步骤四：显示光纤的状态<br>4.1 光纤正常在线的情况</h4>



<pre class="wp-block-code"><code># cat /sys/class/fc_host/host5/port_state
online</code></pre>



<h4 id="4-2-光纤不正常或者不在线的情况">4.2 光纤不正常或者不在线的情况</h4>



<pre class="wp-block-code"><code># cat /sys/class/fc_host/host7/port_state
linkdown</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 命令 nmcli （网络管理）</title>
		<link>https://eternalcenter-now.github.io/nmcli/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 16 Jun 2020 16:30:03 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Network (系统网络)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=9790</guid>

					<description><![CDATA[内容目录： 内容一：整个网络的管理1.1 开启整个网络1.2 关闭整个网络 内容二：管理网络设备2.1 显示网络设备的信息2.1.1 显示所有网络设备2.1.2 显示被激活的网络设备2.2 显示某一个网络设备是否激活2.3 显示网络设备的联通状态2.4 添加网络设备2.5 删除网络设备2.6 激活一个网络设备2.7 取消激活一个网络设备 内容三：IP 地址管理3.1 设置 IP 地址3.1.1 设置 IP 地址的格式3.1.2 设置 IP 地址的案例3.2 让 IP 地址生效3.2.1 让 IP 地址生效的格式3.2.2 让 IP 地址生效的案例 内容四：路由管理4.1 添加路由4.1.1 添加路由的格式4.1.2 添加路由的案例4.2 让路由生效4.2.1 让路由生效的格式4.2.2 让路由生效的案例 具体的内容： 内容一：整个网络的管理1.1 开启整个网络 或者： 1.2 关闭整个网络 或者： 内容二：管理网络设备2.1 显示网络设备的信息2.1.1 显示所有网络设备 或者： 或者： 或者： 2.1.2 &#8230; <p class="link-more"><a href="https://eternalcenter-now.github.io/nmcli/" class="more-link">Continue reading<span class="screen-reader-text"> "[命令] Linux 命令 nmcli （网络管理）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h2 id="内容目录">内容目录：</h2>



<h4 id="内容一-整个网络的管理1-1-开启整个网络1-2-关闭整个网络">内容一：整个网络的管理<br>1.1 开启整个网络<br>1.2 关闭整个网络</h4>



<h4 id="内容二-管理网络设备2-1-显示网络设备的信息2-1-1-显示所有网络设备2-1-2-显示被激活的网络设备2-2-显示某一个网络设备是否激活2-3-显示网络设备的联通状态2-4-添加网络设备2-5-删除网络设备2-6-激活一个网络设备2-7-取消激活一个网络设备">内容二：管理网络设备<br>2.1 显示网络设备的信息<br>2.1.1 显示所有网络设备<br>2.1.2 显示被激活的网络设备<br>2.2 显示某一个网络设备是否激活<br>2.3 显示网络设备的联通状态<br>2.4 添加网络设备<br>2.5 删除网络设备<br>2.6 激活一个网络设备<br>2.7 取消激活一个网络设备</h4>



<h4 id="内容三-ip-地址管理3-1-设置-ip-地址3-1-1-设置-ip-地址的格式3-1-2-设置-ip-地址的案例3-2-让-ip-地址生效3-2-1-让-ip-地址生效的格式3-2-2-让-ip-地址生效的案例">内容三：IP 地址管理<br>3.1 设置 IP 地址<br>3.1.1 设置 IP 地址的格式<br>3.1.2 设置 IP 地址的案例<br>3.2 让 IP 地址生效<br>3.2.1 让 IP 地址生效的格式<br>3.2.2 让 IP 地址生效的案例</h4>



<h4 id="内容四-路由管理4-1-添加路由4-1-1-添加路由的格式4-1-2-添加路由的案例4-2-让路由生效4-2-1-让路由生效的格式4-2-2-让路由生效的案例">内容四：路由管理<br>4.1 添加路由<br>4.1.1 添加路由的格式<br>4.1.2 添加路由的案例<br>4.2 让路由生效<br>4.2.1 让路由生效的格式<br>4.2.2 让路由生效的案例</h4>



<h2 id="具体的内容">具体的内容：</h2>



<h4 id="内容一-整个网络的管理1-1-开启整个网络">内容一：整个网络的管理<br>1.1 开启整个网络</h4>



<pre class="wp-block-code"><code># nmcli network on</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli net on</code></pre>



<h4 id="1-2-关闭整个网络">1.2 关闭整个网络</h4>



<pre class="wp-block-code"><code># nmcli network off</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli net off</code></pre>



<h4 id="内容二-管理网络设备2-1-显示网络设备的信息2-1-1-显示所有网络设备">内容二：管理网络设备<br>2.1 显示网络设备的信息<br>2.1.1 显示所有网络设备</h4>



<pre class="wp-block-code"><code># nmcli connection show</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli conneciton</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli con show</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli con</code></pre>



<h4 id="2-1-2-显示被激活的网络设备">2.1.2 显示被激活的网络设备</h4>



<pre class="wp-block-code"><code># nmcli connection show --active</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli conneciton --active</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli con show --active</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli con --active</code></pre>



<h4 id="2-2-显示某一个网络设备是否激活">2.2 显示某一个网络设备是否激活</h4>



<pre class="wp-block-code"><code># nmcli device connect &lt;network device name&gt;</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli dev con &lt;network device name&gt;</code></pre>



<h4 id="2-3-显示网络设备的联通状态">2.3 显示网络设备的联通状态</h4>



<pre class="wp-block-code"><code># nmcli device status</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli dev status</code></pre>



<h4 id="2-4-添加网络设备">2.4 添加网络设备</h4>



<pre class="wp-block-code"><code># nmcli connection add con-name &lt;custom network card alias&gt; ifname &lt;network device name&gt; type ethernet</code></pre>



<p>（补充：这里 con-name 是指要指定一个自定义的网卡别名，ifname 是指要指明网络设备名）</p>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli con add con-name &lt;custom network card alias&gt; ifname &lt;network device name&gt; type ethernet</code></pre>



<p>（补充：这里 con-name 是指要指定一个自定义的网卡别名，ifname 是指要指明网络设备名）</p>



<h4 id="2-5-删除网络设备">2.5 删除网络设备</h4>



<pre class="wp-block-code"><code># nmcli connection delete &lt;custom network card alias&gt;</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli con del &lt;custom network card alias&gt;</code></pre>



<h4 id="2-6-激活一个网络设备">2.6 激活一个网络设备</h4>



<pre class="wp-block-code"><code># nmcli device connect &lt;network device name&gt;</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli dev con &lt;network device name&gt;</code></pre>



<h4 id="2-7-取消激活一个网络设备">2.7 取消激活一个网络设备</h4>



<pre class="wp-block-code"><code># nmcli device disconnect &lt;network device name&gt;</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># nmcli dev dis &lt;network device name&gt;</code></pre>



<h4 id="内容三-ip-地址管理3-1-设置-ip-地址3-1-1-设置-ip-地址的格式">内容三：IP 地址管理<br>3.1 设置 IP 地址<br>3.1.1 设置 IP 地址的格式</h4>



<pre class="wp-block-code"><code># nmcli connection modify &lt;custom network card alias&gt; ipv4.address &lt;IP address&gt;/&lt;subnet mask&gt; ipv4.gateway &lt;gateway IP address&gt; ipv4.dns &lt;DNS IP address&gt; autoconnect yes</code></pre>



<h4 id="3-1-2-设置-ip-地址的案例">3.1.2 设置 IP 地址的案例</h4>



<pre class="wp-block-code"><code># nmcli connection modify eth0 ipv4.address 192.168.1.1/24 ipv4.gateway 192.168.1.1 ipv4.dns 192.168.1.254 autoconnect yes</code></pre>



<p>（补充：这里以添加给 eth0 添加 IP 地址 192.168.1.1/24，网关 192.168.1.1，DNS 192.168.1.254 为例）</p>



<h4 id="3-2-让-ip-地址生效3-2-1-让-ip-地址生效的格式">3.2 让 IP 地址生效<br>3.2.1 让 IP 地址生效的格式</h4>



<pre class="wp-block-code"><code># nmcli connection up &lt;custom network card alias&gt;</code></pre>



<h4 id="3-2-2-让-ip-地址生效的案例"> 3.2.2 让 IP 地址生效的案例</h4>



<pre class="wp-block-code"><code># nmcli connection down eth0</code></pre>



<h4 id="内容四-路由管理4-1-添加路由4-1-1-添加路由的格式">内容四：路由管理<br>4.1 添加路由<br>4.1.1 添加路由的格式</h4>



<pre class="wp-block-code"><code># nmcli con mod &lt;custom network card alias&gt; ipv4.routes "&lt;network segment&gt; &lt;gateway IP address&gt;"</code></pre>



<h4 id="4-1-2-添加路由的案例">4.1.2 添加路由的案例</h4>



<pre class="wp-block-code"><code># nmcli con mod eth0 ipv4.routes "192.168.2.0/24 192.168.3.1"</code></pre>



<p>（补充：这里以给 eth0 网卡添加 192.168.2.0/24 通过 192.168.3.1 的网关为例）</p>



<h4 id="4-2-让路由生效4-2-1-让路由生效的格式">4.2 让路由生效<br>4.2.1 让路由生效的格式</h4>



<pre class="wp-block-code"><code># nmcli connection up &lt;custom network card alias&gt;</code></pre>



<h4 id="4-2-2-让路由生效的案例">4.2.2 让路由生效的案例</h4>



<pre class="wp-block-code"><code># nmcli connection up eth0</code></pre>



<p>（补充：这里以让 eth0 生效为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 网卡速率的显示</title>
		<link>https://eternalcenter-now.github.io/network-speed/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 11 Jun 2020 08:53:07 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Network (系统网络)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=9742</guid>

					<description><![CDATA[方法一：通过网卡当前的工作状态得知 （补充：由上面的输出结果可以得知 ens192 网卡目前工作在 1000baseT/Full 状态） 方法二：通过网卡的型号得知 （补充：由上面的输出结果可以得知，网卡设备为 VMware VMXNET3 Ethernet Controller (rev 01) ，我们可以在网上搜索此设备名以得知此网卡的速率）]]></description>
										<content:encoded><![CDATA[
<h4 id="方法一-通过网卡当前的工作状态得知">方法一：通过网卡当前的工作状态得知</h4>



<pre class="wp-block-code"><code># ethtool ens192
Settings for ens192:
        Supported ports: &#91; TP ]
        Supported link modes:   1000baseT/Full 
                                10000baseT/Full 
        Supported pause frame use: No
        Supports auto-negotiation: No
        Supported FEC modes: Not reported
        Advertised link modes:  Not reported
        Advertised pause frame use: No
        Advertised auto-negotiation: No
        Advertised FEC modes: Not reported
        Speed: 10000Mb/s
        Duplex: Full
        Port: Twisted Pair
        PHYAD: 0
        Transceiver: internal
        Auto-negotiation: off
        MDI-X: Unknown
        Supports Wake-on: uag
        Wake-on: d
        Link detected: yes</code></pre>



<p>（补充：由上面的输出结果可以得知 ens192 网卡目前工作在 1000baseT/Full 状态）</p>



<h4 id="方法二-通过网卡的型号得知">方法二：通过网卡的型号得知</h4>



<pre class="wp-block-code"><code># lspci -vvv | grep Ethernet
0b:00.0 Ethernet controller: VMware VMXNET3 Ethernet Controller (rev 01)
        Subsystem: VMware VMXNET3 Ethernet Controller</code></pre>



<p>（补充：由上面的输出结果可以得知，网卡设备为 VMware VMXNET3 Ethernet Controller (rev 01) ，我们可以在网上搜索此设备名以得知此网卡的速率）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 网卡命名方式</title>
		<link>https://eternalcenter-now.github.io/network-card-name/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 06 Jun 2020 05:21:04 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Network (系统网络)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=9691</guid>

					<description><![CDATA[内容目录： 内容一：传统编号的命令方式1.1传统编号的命令方式的案例1.2 传统编号的命令方式的组成1.2.1 eth 部分1.2.2 索引号名称的部分 内容二：合并接口类型、适配器类型、索引号的命令方式2.1 合并接口类型、适配器类型、索引号的命名方式的案例2.2 合并接口类型、适配器类型、索引号的命名方式的组成2.2.1 接口类型部分2.2.2 适配器类型部分2.2.3 索引号名称的部分 内容三：合并接口类型、适配器类型、索引号的命令方式3.1 合并接口类型、适配器类型、索引号的命令方式的案例3.2 合并接口类型、适配器类型、索引号的命令方式的组成3.2.1 接口类型部分3.2.2 适配器类型部分3.2.3 适配器物理位置的部分 具体的内容： 内容一：传统编号的命令方式1.1传统编号的命令方式的案例 1.2 传统编号的命令方式的组成1.2.1 eth 部分 1.2.2 索引号名称的部分 按照数字：1、2、3 …… 依次排序 内容二：合并接口类型、适配器类型、索引号的命令方式2.1 合并接口类型、适配器类型、索引号的命名方式的案例 2.2 合并接口类型、适配器类型、索引号的命名方式的组成2.2.1 接口类型部分 1) 以太网线接口：en（Ethernet）2) 串行线 IP （slip）3) 无线局域网接口：wl（wireless LAN，也就是 WLAN）4) 无线广域网接口：ww（wireless wide area network，也就是 WWAN） 2.2.2 适配器类型部分 1) 热插拔插槽：s2) 板载：o3) PCI：p 2.2.3 索引号名称的部分 &#8230; <p class="link-more"><a href="https://eternalcenter-now.github.io/network-card-name/" class="more-link">Continue reading<span class="screen-reader-text"> "[内容] Linux 网卡命名方式"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h2>内容目录：</h2>



<h4>内容一：传统编号的命令方式<br>1.1传统编号的命令方式的案例<br>1.2 传统编号的命令方式的组成<br>1.2.1 eth 部分<br>1.2.2 索引号名称的部分</h4>



<h4>内容二：合并接口类型、适配器类型、索引号的命令方式<br>2.1 合并接口类型、适配器类型、索引号的命名方式的案例<br>2.2 合并接口类型、适配器类型、索引号的命名方式的组成<br>2.2.1 接口类型部分<br>2.2.2 适配器类型部分<br>2.2.3 索引号名称的部分</h4>



<h4>内容三：合并接口类型、适配器类型、索引号的命令方式<br>3.1 合并接口类型、适配器类型、索引号的命令方式的案例<br>3.2 合并接口类型、适配器类型、索引号的命令方式的组成<br>3.2.1 接口类型部分<br>3.2.2 适配器类型部分<br>3.2.3 适配器物理位置的部分</h4>



<h2>具体的内容：</h2>



<h4>内容一：传统编号的命令方式<br>1.1传统编号的命令方式的案例</h4>



<pre class="wp-block-code"><code>eth0</code></pre>



<h4>1.2 传统编号的命令方式的组成<br>1.2.1 eth 部分</h4>



<pre class="wp-block-code"><code>eth</code></pre>



<h4>1.2.2 索引号名称的部分</h4>



<p>按照数字：1、2、3 …… 依次排序</p>



<h4>内容二：合并接口类型、适配器类型、索引号的命令方式<br>2.1 合并接口类型、适配器类型、索引号的命名方式的案例</h4>



<pre class="wp-block-code"><code>ens1</code></pre>



<h4>2.2 合并接口类型、适配器类型、索引号的命名方式的组成<br>2.2.1 接口类型部分</h4>



<p>1) 以太网线接口：en（Ethernet）<br>2) 串行线 IP （slip）<br>3) 无线局域网接口：wl（wireless LAN，也就是 WLAN）<br>4) 无线广域网接口：ww（wireless wide area network，也就是 WWAN）</p>



<h4>2.2.2 适配器类型部分</h4>



<p>1) 热插拔插槽：s<br>2) 板载：o<br>3) PCI：p</p>



<h4>2.2.3 索引号名称的部分</h4>



<p>按照数字：1、2、3 …… 依次排序</p>



<h4>内容三：合并接口类型、适配器类型、索引号的命令方式<br>3.1 合并接口类型、适配器类型、索引号的命令方式的案例</h4>



<pre class="wp-block-code"><code>enp2s0</code></pre>



<h4>3.2 合并接口类型、适配器类型、索引号的命令方式的组成<br>3.2.1 接口类型部分</h4>



<p>1) 以太网线接口：en（Ethernet）<br>2) 串行线 IP（slip）<br>3) 无线局域网接口：wl（wireless LAN，也就是 WLAN）<br>4) 无线广域网接口：ww（wireless wide area network，也就是 WWAN）</p>



<h4>3.2.2 适配器类型部分</h4>



<p>1) 热插拔插槽：s<br>2) 板载：o<br>3) PCI：p</p>



<h4>3.2.3 适配器物理位置的部分</h4>



<p>例如：2s0 就代表物理位置为（2，0）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 命令 iostat  （显示硬盘读写和处理器占用状况） （转载）</title>
		<link>https://eternalcenter-now.github.io/iostat/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 02 Mar 2020 05:48:56 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Performance (系统性能)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<category><![CDATA[System Storage (系统存储)]]></category>
		<category><![CDATA[System Storage & System Directory & System File (系统存储 & 系统目录 & 系统文件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=8555</guid>

					<description><![CDATA[注明：所有转载内容皆直接从被转载文章网页的标题和内容的文本中复制而来]]></description>
										<content:encoded><![CDATA[
<pre class="wp-block-code"><code>iostat 介绍

iostat用于查看存储设备的IO负载情况，输出信息是指定间隔时间内的平均数据，可以持续输出观察。
通过iostat --help通常看不到直观的信息

&#91;root@master ~]# iostat --help
Usage: iostat &#91; options ] &#91; &lt;interval&gt; &#91; &lt;count&gt; ] ]
Options are:
&#91; -c ] &#91; -d ] &#91; -N ] &#91; -n ] &#91; -h ] &#91; -k | -m ] &#91; -t ] &#91; -V ] &#91; -x ] &#91; -y ] &#91; -z ]
&#91; -j { ID | LABEL | PATH | UUID | ... } &#91; &lt;device&gt; &#91;...] | ALL ] ]
&#91; &lt;device&gt; &#91;...] | ALL ] &#91; -p &#91; &lt;device&gt; &#91;,...] | ALL ] ]

    1
    2
    3
    4
    5
    6

可以通过man iostat来查看该命令的具体解释
man iostat|cat &gt; iostat_help.txt

1.常用的选项

OPTIONS
       -c     展示CPU使用情况
       -d     展示存储设备使用情况
       -h     使输出信息更易看。
       -k     使某些使用block为单位的列强制使用k为单位显示统计信息
       -m     使某些使用block为单位的列强制使用m为单位显示统计信息
       -N     显示任何已注册设备映射器名称, 用于查看LVM2统计
       -n     展示NFS使用情况
       -p &#91; { device &#91;,...] | ALL } ]
              显示设备块及其分区统计信息，可以单独指定特定的设备
       -t     打印显示的每个报表的时间, 时间戳格式可能取决于S_TIME_FORMAT环境变量
       -V     显示iostat版本
       -x     显示扩展统计信息
       -y     如果指定了持续输出，那么忽略默认显示的第一次统计信息，即从系统启动直到执行命令的平均信息。
       -z     省略在采样期间没有活动的任何设备的输出.

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
    15

2.执行样例

       iostat
              展示从系统启动到执行命令期间的CPU和存储设备平均统计信息
       iostat -d 2
              以2秒间隔展示存储设备统计信息
       iostat -d 2 6
              以2秒间隔展示存储设备统计信息，共展示6次
       iostat -x hda hdb 2 6
              以2秒间隔展示存储设备hda和hdb的拓展统计信息，共展示6次
       iostat -p sda 2 6
              以2秒间隔展示存储设备sda及其分区的统计信息，共展示6次

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10

3.输出信息解析

# iostat -x -d -m -y -c 2 10
Linux 3.10.0-229.el7.x86_64 (KYL-DB-MYSQL-SLAVE01)      05/09/2019      _x86_64_        (24 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.40    0.00    0.38    4.13    0.00   95.10

Device:         rrqm/s   wrqm/s     r/s     w/s    rMB/s    wMB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
sda               0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00
sdb               0.00     0.00   14.00  563.00     0.07    19.51    69.49     1.40    2.46    9.89    2.28   0.88  50.90
dm-0              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00
dm-1              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00    0.00    0.00   0.00   0.00
dm-2              0.00     0.00   13.50  562.50     0.07    19.50    69.58     1.41    2.47   10.26    2.28   0.88  50.95

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12

1.CPU信息
%user:用户态CPU使用率
%nice:优先级变化占用CPU的使用率
%system:内核态CPU使用率
%iowait:CPU等待IO的占比
%steal:虚拟CPU等待实际CPU的时间的百分比
%idle:CPU空闲率

2.存储设备信息
rrqm/s:每秒对该设备的读请求的合并次数
wrqm/s:每秒对该设备的写请求的合并次数
r/s:每秒读取的次数
w/s:每秒写入的次数
rMB/s:以m为单位计算每秒读取量
wMB/s:以m为单位计算每秒写入量
avgrq-sz:平均每次IO操作的数据量（扇区数为单位），包括读和写
avgqu-sz:平均等待处理的IO请求队列长度
await:平均IO等待时间（milliseconds），包括排队时间和IO执行时间
r_await:平均读取等待时间（milliseconds），包括排队时间和IO执行时间
w_await:平均写入等待时间（milliseconds），包括排队时间和IO执行时间
svctm:平均IO服务时间（milliseconds），不准确
%util:统计时间内，CPU处理IO的时间对于间隔时间的占比，例如间隔2秒，CPU处理IO占了1秒，那么就是50%，可以体现存储设备的繁忙程度
————————————————
版权声明：本文为CSDN博主「灯火觅阑珊」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_39004901/article/details/90022623</code></pre>



<p>注明：所有转载内容皆直接从被转载文章网页的标题和内容的文本中复制而来</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" width="1012" height="233" src="https://eternalcenter-now.github.io/wp-content/uploads/2020/03/版权申明证明-iostat.png" alt="" class="wp-image-8556" srcset="https://eternalcenter-now.github.io/wp-content/uploads/2020/03/版权申明证明-iostat.png 1012w, https://eternalcenter-now.github.io/wp-content/uploads/2020/03/版权申明证明-iostat-300x69.png 300w, https://eternalcenter-now.github.io/wp-content/uploads/2020/03/版权申明证明-iostat-768x177.png 768w" sizes="(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px" /><figcaption>CC 4.0 BY-SA 版权协议网址：https://creativecommons.org/licenses/by-sa/4.0/deed.z</figcaption></figure></div>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 硬件信息的显示 （CPU、内存、硬盘和其他硬件信息）</title>
		<link>https://eternalcenter-now.github.io/hardware-information/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Wed, 21 Aug 2019 15:19:33 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Hardware (系统硬件)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Performance (系统性能)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<category><![CDATA[System Storage (系统存储)]]></category>
		<category><![CDATA[System Storage & System Directory & System File (系统存储 & 系统目录 & 系统文件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-now.github.io/?p=5419</guid>

					<description><![CDATA[内容目录： 内容一：显示 CPU 信息1.1 显示 CPU 个数（也就是处理的 socket 数）1.2 显示 CPU 核心数1.3 显示 CPU 的详细信息 内容二：显示内存大小2.1 显示内存大小2.2 显示内存详细信息 内容三：显示硬盘信息 内容四：显示其他硬件的方法4.1 显示其他所有硬件的方法4.2 显示某一个硬件的方法 具体的内容： 内容一：显示 CPU 信息1.1 显示 CPU 个数（也就是处理的 socket 数） 1.2 显示 CPU 核心数 1.3 显示 CPU 的详细信息 或者： 内容二：显示内存大小2.1 显示内存大小 2.2 显示内存详细信息 内容三：显示硬盘信息 内容四：显示其他硬件的信息4.1 显示其他所有硬件的信息 4.2 显示某 1 个硬件的信息 （补充：这里以显示鼠标信息的方法为例）]]></description>
										<content:encoded><![CDATA[
<h2 id="内容目录">内容目录：</h2>



<h4 id="内容一-显示-cpu-信息1-1-显示-cpu-个数-也就是处理的-socket-数-1-2-显示-cpu-核心数1-3-显示-cpu-的详细信息">内容一：显示 CPU 信息<br>1.1 显示 CPU 个数（也就是处理的 socket 数）<br>1.2 显示 CPU 核心数<br>1.3 显示 CPU 的详细信息</h4>



<h4 id="内容二-显示内存大小2-1-显示内存大小2-2-显示内存详细信息">内容二：显示内存大小<br>2.1 显示内存大小<br>2.2 显示内存详细信息</h4>



<h4 id="内容三-查看硬盘信息">内容三：显示硬盘信息</h4>



<h4 id="内容四-显示其他硬件的方法4-1-显示其他所有硬件的方法4-2-显示某一个硬件的方法">内容四：显示其他硬件的方法<br>4.1 显示其他所有硬件的方法<br>4.2 显示某一个硬件的方法</h4>



<h2 id="具体的内容">具体的内容：</h2>



<h4 id="内容一-显示-cpu-信息1-1-显示-cpu-个数-也就是处理的-socket-数">内容一：显示 CPU 信息<br>1.1 显示 CPU 个数（也就是处理的 socket 数）</h4>



<pre class="wp-block-code"><code># cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l</code></pre>



<h4 id="1-2-显示-cpu-核心数">1.2 显示 CPU 核心数</h4>



<pre class="wp-block-code"><code># cat /proc/cpuinfo | egrep "core id|physical id" | tr -d "\n" | sed s/physical/\\nphysical/g | grep -v ^$ | sort | uniq | wc -l</code></pre>



<h4 id="1-3-显示-cpu-的详细信息">1.3 显示 CPU 的详细信息</h4>



<pre class="wp-block-code"><code># lscpu</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># cat /proc/cpuinfo </code></pre>



<div class="wp-container-2 wp-block-buttons">
<div class="wp-block-button aligncenter"><a class="wp-block-button__link" href="https://eternalcenter-now.github.io/linux-cpu/" style="border-radius:0px">（补充：Linux CPU 详细信息的显示）</a></div>
</div>



<h4 id="内容二-显示内存大小2-1-显示内存大小">内容二：显示内存大小<br>2.1 显示内存大小</h4>



<pre class="wp-block-code"><code># free -m</code></pre>



<h4 id="2-2-显示内存详细信息">2.2 显示内存详细信息</h4>



<pre class="wp-block-code"><code># cat /proc/meminfo </code></pre>



<h4 id="内容三-查看硬盘信息">内容三：显示硬盘信息</h4>



<pre class="wp-block-code"><code># lsblk</code></pre>



<h4 id="内容四-显示其他硬件的信息4-1-显示其他所有硬件的信息">内容四：显示其他硬件的信息<br>4.1 显示其他所有硬件的信息</h4>



<pre class="wp-block-code"><code># dmesg</code></pre>



<h4 id="4-2-显示某一个硬件的信息">4.2 显示某 1 个硬件的信息</h4>



<pre class="wp-block-code"><code># dmesg | grep -i mouse</code></pre>



<p>（补充：这里以显示鼠标信息的方法为例）</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
